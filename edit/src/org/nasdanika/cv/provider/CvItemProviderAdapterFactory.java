/**
 */
package org.nasdanika.cv.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.nasdanika.cv.util.CvAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CvItemProviderAdapterFactory extends CvAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CvItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.cv.CurriculumVitae} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CurriculumVitaeItemProvider curriculumVitaeItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.cv.CurriculumVitae}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCurriculumVitaeAdapter() {
		if (curriculumVitaeItemProvider == null) {
			curriculumVitaeItemProvider = new CurriculumVitaeItemProvider(this);
		}

		return curriculumVitaeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.cv.Experience} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExperienceItemProvider experienceItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.cv.Experience}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExperienceAdapter() {
		if (experienceItemProvider == null) {
			experienceItemProvider = new ExperienceItemProvider(this);
		}

		return experienceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.cv.Position} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PositionItemProvider positionItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.cv.Position}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPositionAdapter() {
		if (positionItemProvider == null) {
			positionItemProvider = new PositionItemProvider(this);
		}

		return positionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.cv.Assignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssignmentItemProvider assignmentItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.cv.Assignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssignmentAdapter() {
		if (assignmentItemProvider == null) {
			assignmentItemProvider = new AssignmentItemProvider(this);
		}

		return assignmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.cv.Comment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommentItemProvider commentItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.cv.Comment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommentAdapter() {
		if (commentItemProvider == null) {
			commentItemProvider = new CommentItemProvider(this);
		}

		return commentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.cv.SkillLevel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SkillLevelItemProvider skillLevelItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.cv.SkillLevel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSkillLevelAdapter() {
		if (skillLevelItemProvider == null) {
			skillLevelItemProvider = new SkillLevelItemProvider(this);
		}

		return skillLevelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.cv.SkillCategory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SkillCategoryItemProvider skillCategoryItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.cv.SkillCategory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSkillCategoryAdapter() {
		if (skillCategoryItemProvider == null) {
			skillCategoryItemProvider = new SkillCategoryItemProvider(this);
		}

		return skillCategoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.cv.Skill} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SkillItemProvider skillItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.cv.Skill}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSkillAdapter() {
		if (skillItemProvider == null) {
			skillItemProvider = new SkillItemProvider(this);
		}

		return skillItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.cv.SkillRelease} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SkillReleaseItemProvider skillReleaseItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.cv.SkillRelease}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSkillReleaseAdapter() {
		if (skillReleaseItemProvider == null) {
			skillReleaseItemProvider = new SkillReleaseItemProvider(this);
		}

		return skillReleaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.cv.AccomplishmentType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccomplishmentTypeItemProvider accomplishmentTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.cv.AccomplishmentType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccomplishmentTypeAdapter() {
		if (accomplishmentTypeItemProvider == null) {
			accomplishmentTypeItemProvider = new AccomplishmentTypeItemProvider(this);
		}

		return accomplishmentTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.cv.AccomplishmentCategory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccomplishmentCategoryItemProvider accomplishmentCategoryItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.cv.AccomplishmentCategory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccomplishmentCategoryAdapter() {
		if (accomplishmentCategoryItemProvider == null) {
			accomplishmentCategoryItemProvider = new AccomplishmentCategoryItemProvider(this);
		}

		return accomplishmentCategoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.cv.Accomplishment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccomplishmentItemProvider accomplishmentItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.cv.Accomplishment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccomplishmentAdapter() {
		if (accomplishmentItemProvider == null) {
			accomplishmentItemProvider = new AccomplishmentItemProvider(this);
		}

		return accomplishmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.cv.Resume} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResumeItemProvider resumeItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.cv.Resume}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResumeAdapter() {
		if (resumeItemProvider == null) {
			resumeItemProvider = new ResumeItemProvider(this);
		}

		return resumeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (curriculumVitaeItemProvider != null) curriculumVitaeItemProvider.dispose();
		if (experienceItemProvider != null) experienceItemProvider.dispose();
		if (positionItemProvider != null) positionItemProvider.dispose();
		if (assignmentItemProvider != null) assignmentItemProvider.dispose();
		if (commentItemProvider != null) commentItemProvider.dispose();
		if (skillLevelItemProvider != null) skillLevelItemProvider.dispose();
		if (skillCategoryItemProvider != null) skillCategoryItemProvider.dispose();
		if (skillItemProvider != null) skillItemProvider.dispose();
		if (skillReleaseItemProvider != null) skillReleaseItemProvider.dispose();
		if (accomplishmentTypeItemProvider != null) accomplishmentTypeItemProvider.dispose();
		if (accomplishmentCategoryItemProvider != null) accomplishmentCategoryItemProvider.dispose();
		if (accomplishmentItemProvider != null) accomplishmentItemProvider.dispose();
		if (resumeItemProvider != null) resumeItemProvider.dispose();
	}

}
